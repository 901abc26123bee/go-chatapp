worker_processes 4;

events {
    worker_connections   1024;
}

http {
    default_type  application/octet-stream;

    # DDoS Protection.
    limit_req_zone $binary_remote_addr zone=perip:1m rate=100r/s;

    sendfile        on;
    keepalive_timeout  65;

    # Upstream configuration for HTTP server
    upstream account_server {
        least_conn;

        server account:8080 weight=10 max_fails=3 fail_timeout=30s;   # Use the service name defined in docker-compose.yml/kubernetes service(service_name:port)
    }

    # Upstream configuration for WebSocket server
    upstream realtime_server {
        # sticky cookie srv_id expires=1h domain=gsm-dev path=/;  # NGINX Plus supports only
        ip_hash; # for sticky session

        least_conn;

        # Load balancing between two realtime containers
        server realtime:8081 weight=10 max_fails=3 fail_timeout=30s;   # Use the service name defined in docker-compose.yml/kubernetes service(service_name:port)
        server realtime2:8082 weight=10 max_fails=3 fail_timeout=30s;   # Use the service name defined in docker-compose.yml/kubernetes service(service_name:port)
    }

    server {
        server_name gsm-dev;

        # web location
        root /var/www;  # Change the root directory to /var/www
        index index.html;

        # set DNS resolver as Docker internal DNS
        resolver 127.0.0.11 valid=10s;

        listen 80 default_server;       # For IPv4
        listen [::]:80 default_server;  # For IPv6


        # To allow special characters in headers
        ignore_invalid_headers off;
        # Allow any size file to be uploaded.
        # Set to a value such as 1000m; to restrict file size to a specific value
        client_max_body_size 0;
        # To disable buffering
        proxy_buffering off;
        proxy_request_buffering off;

        # Route for realtime service
        location /api/realtime {
            include /etc/nginx/proxy_params;

            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
                        
            proxy_pass http://realtime_server$request_uri;
        }

        # Route for account service
        location /api/account {
            include /etc/nginx/proxy_params;

            proxy_pass http://account_server$request_uri;
        }

        location / {
            try_files $uri $uri/index.html =404;
        }
    }
}
