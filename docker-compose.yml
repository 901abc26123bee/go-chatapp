version: '3.8'

services:
  # postgres:
  #   build:
  #     context: .
  #     dockerfile: ./deployment/dockerfile/postgres.Dockerfile
  #   container_name: gsm_postgres
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #     POSTGRES_DB: gsm_dev
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./deployment/config/db:/docker-entrypoint-initdb.d/
  #   # The line below will ensure SQL files are executed in alphabetical order
  #   command: ["postgres", "-c", "log_statement=all"]
  redis:
    build:
      context: .
      dockerfile: ./deployment/dockerfile/redis.Dockerfile
    container_name: gsm_redis
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
      - ./deployment/config/redis/init.config:/usr/local/etc/redis/init.conf
    command: ["redis-server", "/usr/local/etc/redis/init.conf"]
    networks:
      - gsm_network
  mongo:
    build:
      context: .
      dockerfile: ./deployment/dockerfile/mongodb.Dockerfile
    container_name: gsm_mongo
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db
      - ./deployment/config/mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpw
      MONGO_INITDB_DATABASE: gsm
    networks:
      - gsm_network
  # minio:
  #   build:
  #     context: .
  #     dockerfile: ./deployment/dockerfile/minio.Dockerfile
  #   container_name: gsm_minio
  #   environment:
  #     MINIO_ROOT_USER: miniouser
  #     MINIO_ROOT_PASSWORD: miniosecret
  #   ports:
  #     - "9000:9000"
  #     - "9001:9001" # for MinIO console
  #   volumes:
  #     - minio_data:/data
  #   command: server /data --console-address ":9001"
  #   networks:
  #     - gsm_network
  nginx:
    build:
      context: .
      dockerfile: ./deployment/dockerfile/nginx.Dockerfile
    container_name: gsm_nginx
    ports:
      - "80:80"
    volumes:
      - ./deployment/config/nginx/proxy_params:/etc/nginx/proxy_params
      - ./deployment/config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./web:/var/www  # Map the frontend build(web) directory
    links:
      - account
      - realtime
      - realtime2
    depends_on:
      - account
      - realtime
      - realtime2
    networks:
      - gsm_network
  # for stateless services can utilize Kubernetes deployments auto-scaling.
  account:
    build:
      context: .
      dockerfile: ./deployment/dockerfile/account.Dockerfile
    container_name: gsm_account
    ports:
      - "8080:8080"
    volumes:
      - ./deployment/config/db/postgres.txt:/deployment/config/db/postgres.txt
      - ./deployment/config/redis/redis.txt:/deployment/config/redis/redis.txt
      - ./deployment/config/mongodb/mongo.txt:/deployment/config/mongodb/mongo.txt
    command: ["/go/bin/account", "-sql", "/deployment/config/db/postgres.txt",
                "-redis", "/deployment/config/redis/redis.txt",
                "-mongodb", "/deployment/config/mongodb/mongo.txt",
                "-jwt", "jwtsecret",
                "--port", ":8080"]
    depends_on:
      - redis
      - mongo
    networks:
      - gsm_network
  realtime:
    build:
      context: .
      dockerfile: ./deployment/dockerfile/realtime.Dockerfile
    container_name: gsm_realtime
    ports:
      - "8081:8081"
    volumes:
      - ./deployment/config/db/postgres.txt:/deployment/config/db/postgres.txt
      - ./deployment/config/redis/redis.txt:/deployment/config/redis/redis.txt
      - ./deployment/config/mongodb/mongo.txt:/deployment/config/mongodb/mongo.txt
    command: ["/go/bin/realtime", "-sql", "/deployment/config/db/postgres.txt",
                "-redis", "/deployment/config/redis/redis.txt",
                "-mongodb", "/deployment/config/mongodb/mongo.txt",
                "-jwt", "jwtsecret",
                "--port", ":8081"]
    depends_on:
      - redis
      - mongo
    networks:
      - gsm_network
  # for testing proxy sticky session
  realtime2:
    build:
      context: .
      dockerfile: ./deployment/dockerfile/realtime.Dockerfile
    container_name: gsm_realtime_2
    ports:
      - "8082:8082"
    volumes:
      - ./deployment/config/db/postgres.txt:/deployment/config/db/postgres.txt
      - ./deployment/config/redis/redis.txt:/deployment/config/redis/redis.txt
      - ./deployment/config/mongodb/mongo.txt:/deployment/config/mongodb/mongo.txt
    command: ["/go/bin/realtime", "-sql", "/deployment/config/db/postgres.txt",
                "-redis", "/deployment/config/redis/redis.txt",
                "-mongodb", "/deployment/config/mongodb/mongo.txt",
                "-jwt", "jwtsecret",
                "--port", ":8082"]
    depends_on:
      - redis
      - mongo
    networks:
      - gsm_network

volumes:
  # postgres_data:
  mongo_data:
  redis_data:
  # minio_data:

networks:
  gsm_network: